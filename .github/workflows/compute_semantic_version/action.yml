name: Resolve Semantic Version
description: Update Version of a Package in pyproject.toml

inputs:
  dev-version-suffix:
    description: Suffix to append to the dev-version
    default: ""
  github-token:
    description: Github Secret Token (needed for tag resolution)
    required: true
  main-branch:
    description: Name of the main branch
    default: "main"

outputs:
  base-version:
    description: Stable version, on top of which the dev-version is resolved
    value: ${{ steps.postprocess-tag.outputs.base-version }}
  dev-version:
    description: Unique dev version (based on commit SHA)
    value: ${{ steps.postprocess-tag.outputs.dev-version }}

runs:
  using: "composite"
  steps:

    # Pull the tags that match `v{number}.{number}*` (matches both v9.0 and v9.0.0), but if this fails (managed using ||), add a new v0.0.0 tag
    - name: Add fake tag (v0.0.0) on first ever commit in case no other tag is present (this is required to set an initial "diff" for the github-tag-action)
      run: |
        git fetch origin ${{ inputs.main-branch }} --tags && \
        git describe --abbrev=0 --tags --match "v[0-9]*\.[0-9]*" origin/${{ inputs.main-branch }} 2> /dev/null || \
        git tag v0.0.0 $(git log --pretty=oneline --reverse origin/${{ inputs.main-branch }} | head -1 | cut -d ' ' -f 1) && \
        git push --tags
      shell: bash

    - name: Compute new version based on semantic versioning
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.1
      with:
        dry_run: "true"
        fetch_all_tags: true
        github_token: ${{ inputs.github-token }}
        tag_prefix: ""

    - name: Get last commit hash (when on PR)
      if: ${{ github.event_name == 'pull_request' }}
      id: last-commit-hash-pr
      run: echo "LAST_COMMIT_SHA="${{ github.event.pull_request.head.sha }} >> $GITHUB_OUTPUT
      shell: bash

    - name: Get last commit hash (when not on PR)
      if: ${{ github.event_name != 'pull_request' }}
      id: last-commit-hash
      run: echo "LAST_COMMIT_SHA="$(git rev-parse HEAD~0) >> $GITHUB_OUTPUT
      shell: bash

    - name: Postprocess Tag (create dev-version and base-version outputs)
      id: postprocess-tag
      run: python "${GITHUB_ACTION_PATH}/postprocess_version.py"
      shell: bash
      env:
        SEMANTIC_VERSION: ${{ steps.tag_version.outputs.new_version }}
        DEV_VERSION_SUFFIX: ${{ github.event_name == 'pull_request' && steps.last-commit-hash-pr.outputs.LAST_COMMIT_SHA || steps.last-commit-hash.outputs.LAST_COMMIT_SHA }}

    - name: Set Computed Versions as Env Vars
      id: export-vars
      shell: bash
      run: |
        echo "BASE_VERSION=${{ steps.postprocess-tag.outputs.base-version }}" >> $GITHUB_ENV
        echo "DEV_VERSION=${{ steps.postprocess-tag.outputs.dev-version }}" >> $GITHUB_ENV
